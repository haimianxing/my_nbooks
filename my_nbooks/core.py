# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_core.ipynb.

# %% auto 0
__all__ = ['meanMedianImputer', 'arbitraryNumberImputer', 'OneHotEncoder', 'OrdinalEncoder', 'MeanEncoder', 'rareLabelEncoder',
           'WoEEncoder', 'CountFrequencyEncoder', 'DecisionTreeEncoder', 'StringSimilarityEncoder', 'Winsorizer',
           'ArbitraryOutlierCapper', 'OutlierTrimmer', 'BoxCoxTransformer', 'PowerTransformer', 'ArcsinTransformer']

# %% ../nbs/03_core.ipynb 3
def meanMedianImputer(X):
    """ 平均缺失特征插值 """
    from feature_engine.imputation import MeanMedianImputer
    mmi = MeanMedianImputer(imputation_method='median')
    mmi.fit(X)
    X2 = mmi.transform(X)
    return X2

# %% ../nbs/03_core.ipynb 4
def arbitraryNumberImputer(X,val=-999):
    """ 固定缺失特征插值 """
    from feature_engine.imputation import ArbitraryNumberImputer
    ani = ArbitraryNumberImputer(arbitrary_number=val)
    ani.fit(X)
    X2 = ani.transform(X)
    return X2

# %% ../nbs/03_core.ipynb 9
def OneHotEncoder(X):
    """ 文本独热编码 """
    from feature_engine.encoding import OneHotEncoder
    ohe = OneHotEncoder()
    ohe.fit(X)
    X2=ohe.transform(X)
    
    return X2

# %% ../nbs/03_core.ipynb 10
def OrdinalEncoder(X):
    """ 文本序号编码 """
    from feature_engine.encoding import OrdinalEncoder
    od = OrdinalEncoder(encoding_method='arbitrary')
    od.fit(X)
    X2 =od.transform(X)
    return X2

# %% ../nbs/03_core.ipynb 15
def MeanEncoder(X,y):
    """ 文本平均编码 （出现频率太低可能会异常 log 0）,y为target"""
    from feature_engine.encoding import MeanEncoder
    me = MeanEncoder()
    me.fit(X,y)
    X2=me.transform(X)
    return X2

# %% ../nbs/03_core.ipynb 18
def rareLabelEncoder(X):
    """ 文本平均编码 （出现频率太低可能会异常 log 0）,y为target"""
    from feature_engine.encoding import RareLabelEncoder
    rle = RareLabelEncoder(n_categories = 1, tol=0.2)
    rle.fit(X)
    X2 = rle.transform(X)
    return X2

# %% ../nbs/03_core.ipynb 21
def WoEEncoder(X,y):
    """ 文本平均编码 （出现频率太低可能会异常 log 0）,y为target"""
    from feature_engine.encoding import WoEEncoder
    # 证据权重 (WoE) 代替类别
    woe = WoEEncoder()
    woe.fit(X, y)
    X2 = woe.transform(X)
    return X2

# %% ../nbs/03_core.ipynb 24
def CountFrequencyEncoder(X):
    """ 文本平均编码 （出现频率太低可能会异常 log 0）,y为target"""
    from feature_engine.encoding import CountFrequencyEncoder
    cf = CountFrequencyEncoder(encoding_method='count')
    cf.fit(X)
    X2=cf.transform(X)
    return X2

# %% ../nbs/03_core.ipynb 27
def DecisionTreeEncoder(X,y,regression=True):
    """ 文本平均编码 （出现频率太低可能会异常 log 0）,y为target"""
    from feature_engine.encoding import DecisionTreeEncoder
    # 回归任务数据决策树编码
    if regression:
        dte = DecisionTreeEncoder(cv=2)
    else:
        dte = DecisionTreeEncoder(regression=False, cv=2)
    dte.fit(X, y)
    X2=dte.transform(X)
    return X2

# %% ../nbs/03_core.ipynb 30
def StringSimilarityEncoder(X):
    """ 文本平均编码 （出现频率太低可能会异常 log 0）,y为target"""
    from feature_engine.encoding import StringSimilarityEncoder
    sse = StringSimilarityEncoder()
    sse.fit(X)
    X2 = sse.transform(X)
    return X2

# %% ../nbs/03_core.ipynb 33
def Winsorizer(X,method='mad'):
    """ 文本平均编码 （出现频率太低可能会异常 log 0）,y为target"""
    from feature_engine.outliers import Winsorizer
    wz = Winsorizer(capping_method=method, tail='both', fold=3)
    wz.fit(X)
    X2=wz.transform(X)
    return X2

# %% ../nbs/03_core.ipynb 36
def ArbitraryOutlierCapper(X):
    """ 文本平均编码 （出现频率太低可能会异常 log 0）,y为target"""
    from feature_engine.outliers import ArbitraryOutlierCapper
    aoc = ArbitraryOutlierCapper(max_capping_dict=dict(x1 =  8),
                                 min_capping_dict=dict(x1 = 2))
    aoc.fit(X)
    X2=aoc.transform(X)
    return X2

# %% ../nbs/03_core.ipynb 39
def OutlierTrimmer(X,method='mad'):
    """ 文本平均编码 （出现频率太低可能会异常 log 0）,y为target"""
    from feature_engine.outliers import OutlierTrimmer
    ot = OutlierTrimmer(capping_method=method, tail='left', fold=3)
    ot.fit(X)
    X2=ot.transform(X)
    return X2

# %% ../nbs/03_core.ipynb 42
def BoxCoxTransformer(X):
    """ 文本平均编码 （出现频率太低可能会异常 log 0）,y为target"""
    from feature_engine.transformation import BoxCoxTransformer
    # Box-Cox 变换定义为：
    # T(Y)=(Y exp(λ)−1)/λ 如果 λ!=0
    # 否则 log(Y)
    # 其中 Y 是响应变量，λ 是转换参数。λ 变化，通常从 -5 到 5。在转换中，将考虑 λ 的所有值，并选择给定变量的最佳值。
    
    
    bct = BoxCoxTransformer()
    bct.fit(X)
    X2 = bct.transform(X)
    return X2

# %% ../nbs/03_core.ipynb 45
def PowerTransformer(X):
    """ 文本平均编码 （出现频率太低可能会异常 log 0）,y为target"""
    from feature_engine.transformation import PowerTransformer
    pt = PowerTransformer()
    pt.fit(X)
    X2 = pt.transform(X)
    return X2

# %% ../nbs/03_core.ipynb 48
def ArcsinTransformer(X):
    """ 文本平均编码 （出现频率太低可能会异常 log 0）,y为target"""
    from feature_engine.transformation import ArcsinTransformer
    ast = ArcsinTransformer()
    ast.fit(X)
    X2 = ast.transform(X)
    return X2
